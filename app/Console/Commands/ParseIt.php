<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Goutte\Client;
use XmlParser;
use DB;
use StdClass;
use File;
use App\Category;
use App\Organization;
use App\Branch;
use App\Phone;
use App\Social;

class ParseIt extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'parser:do';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';



    protected $categoriesMap = [
    // Авто
    'Автосервис / Автотовары'     => 1,

      // Автозапчасти и аксессуары
      'Автоаксессуары'              => 2,
      'Автозапчасти для грузовых автомобилей' => 2,
      'Автозапчасти для легковых автомобилей' => 2,
      'Автозвук' => 2,
      'Автомобильные аккумуляторы' => 2,
      'Автосигнализации' => 2,
      'Автостекло' => 2,
      'Автоэмали' => 2,
      'Газовое оборудование для автотранспорта' => 2,
      'Запчасти для мототехники' => 2,
      'Запчасти для общественного транспорта' => 2,
      'Запчасти для спецтехники' => 2,
      'Запчасти к сельхозтехнике' => 2,
      'Контрактные автозапчасти' => 2,
      'Специализированное автооборудование' => 2,
      'Тахографы' => 2,
      'Тонировочные / защитные плёнки для автомобилей' => 2,
      'Топливные карты' => 2,

      // АЗС -3
      'Автозаправочные станции (АЗС)' => 3,

      // Пункты замена масла, продажа смазочных материалов - 4
      'Автомасла / Мотомасла / Химия' => 4,
      'Аппаратная замена масла' => 4,

      // Автомойки - 5
      'Автомойки' => 5,

      // Автосервис, СТО - 6
      'Авторемонт и техобслуживание (СТО)' => 6,
      'Антикоррозийная обработка автомобилей' =>6,
      'Аэрография на транспорте' => 6,
      'Детейлинг' => 6,
      'Компьютерная диагностика автомобилей' => 6,
      'Кузовной ремонт' => 6,
      'Переоборудование автомобилей' => 6,
      'Пошив авточехлов / автоковров' => 6,
      'Развал / Схождение' => 6,
      'Тонирование автостёкол' => 6,
      'Тюнинг' => 6,
      'Услуги авторазбора' => 6,

      // Автостоянки - 7
      'Автостоянки' => 7,

      // Шины, диски - 8
      'Хранение шин' => 8,
      'Шиномонтаж' => 8,
      'Шины / Диски' => 8,

      // Пассажирские перевозки - 9
      'Заказ легковых такси' => 9,

      // Грузовые перевозки - 10
      'Междугородные автогрузоперевозки' => 10,
      'Городские автогрузоперевозки' => 10,
      'Международные грузоперевозки' => 10,
      'Железнодорожные грузоперевозки' => 10,
      'Контейнеры для грузоперевозок' => 10,
      'Услуги грузчиков' => 10,

      // Автосалоны - 11
      'Продажа легковых автомобилей' => 11,

      // Аренда авто - 12
      'Прокат автотранспорта' => 12,

    // Государство
    'Город / Власть'     => 30,

      // Областной акимат - 31
      'Акимат области' => 31,

      // Городской акимат - 32
      'Акимат города' => 32,
      'Маслихат города' => 32,

      // Районные акиматы города - 33
      'Акиматы районов города' => 33,

      // Общественные организации - 34
      'Благотворительные фонды' => 34,
      'Детские дома / Приюты' => 34,
      'Дома престарелых' => 34,
      'Дома ребёнка' => 34,
      'Общественные организации' => 34,
      'Политические организации' => 34,
      'Отделы доставки пенсий и пособий' => 34,

      // Правоохранительные органы - 35
      'Военная комендатура' => 35,
      'Военные комиссариаты' => 35,
      'Государственные миграционные службы' => 35,
      'Изоляторы временного содержания / Спецприёмники' => 35,
      'Инспекции' => 35,
      'Исправительные учреждения' => 35,
      'ОМВД / УМВД / ГУМВД / МВД' => 35,
      'Организации природоохраны' => 35,
      'Органы государственного надзора' => 35,
      'Отделения полиции' => 35,
      'Отделы ветеринарно-санитарного контроля' => 35,
      'Приёмные Уполномоченных по правам человека' => 35,
      'Прокуратура' => 35,
      'УДП' => 35,
      'Участковые пункты полиции' => 35,

      // Государственные учреждения - 36
      'Государственные архивы' => 36,
      'Государственные службы' => 36,
      'Службы занятости населения' => 36,
      'Социальные службы' => 36,
      'Таможня' => 36,

      // Налоговые органы - 37
      'Налоговые инспекции' => 37,
      'Нотариальные палаты' => 37,

      // ЕНПФ - 38
      'Пенсионные фонды' => 38,

      // Посольства - 39
      'Посольства / Консульства' => 39,

      // ЦОН и Юстиции - 40
      'РАГСы' => 40,
      'ЦОН' => 40,

      // Суды - 41
      'Судебная экспертиза' => 41,
      'Судебные исполнители' => 41,
      'Суды' => 41,

      // ЖКХ - 42
      'ГРЭС / КЭС / ТЭЦ' => 42,
      'Жилищно-коммунальные услуги' => 42,
      'Теплоснабжение / Энергоснабжение / Водоснабжение' => 42,

      // Государственные сайты - 43
      'Государственные информационные сайты' => 43,

    // Развлечения, отдых и досуг
    'Досуг / Развлечения / Общественное питание' => 83,

      // Аквапарки - 84
      'Аквапарки / Водные аттракционы' => 84,

      // Кафе - 85
      'Антикафе' => 85,
      'Кафе' => 85,

      // Сауны, бани - 86
      'Бани / Сауны' => 86,

      // Рестораны и залы торжества - 87
      'Банкетные залы' => 87,
      'Рестораны' => 87,
      'Суши-бары / рестораны' => 87,

      // Ночные клубы, бары - 88
      'Бары' => 88,
      'Ночные клубы' => 88,

      // Бильярд, боулинг - 89
      'Бильярдные залы' => 89,
      'Боулинг' => 89,

      // Букмекерские конторы - 90
      'Букмекерские конторы / Лотереи' => 90,

      // Доставка - 91
      'Доставка готовых блюд' => 91,

      // Караоке - 92
      'Караоке-залы' => 92,

      // Пиццерии, закусочные, пункты быстрого питания - 93
      'Кафе / рестораны быстрого питания' => 93,
      'Пиццерии' => 93,
      'Столовые' => 93,

      // Кондитерские - 94
      'Кафе-кондитерские / Кофейни' => 94,

      // Компьютерные клубы - 95
      'Клубы настольных игр / видеоигр' => 95,
      'Компьютерные клубы' => 95,

      // Кинотеатры - 96
      'Кинотеатры' => 96,

      // Зоны отдыха - 97
      
      // Парки, музеи, театры, галереи, цирки, библиотеки - 98
      'Аттракционы / Парки аттракционов' => 98,
      'Ботанический сад / Дендрарий' => 98,
      'Верёвочные парки' => 98,
      'Дома / дворцы культуры' => 98,
      'Зоопарк' => 98,
      'Парк бабочек' => 98,
      'Парки для водных видов спорта' => 98,
      'Парки культуры и отдыха' => 98,
      'Цирк' => 98,
      'Концертные залы' => 98,
      'Дома / дворцы культуры' => 98,
      'Библиотеки' => 98,
      'Музеи' => 98,
      'Театры' => 98,
      'Филармония' => 98,
      'Художественные выставки / Галереи' => 98,
      'Художественные мастерские' => 98,

    // Безопасность
    'Охрана / Безопасность' => 13,

      // Охранные агентства - 14
      'Вневедомственная охрана' => 14,
      'Услуги охраны' => 14,

      // Охранное оборудование - 15
      'Детекторы лжи' => 15,
      'Домофоны' => 15,
      'Огнезащитная обработка' => 15,
      'Пломбировочные устройства' => 15,
      'Противопожарное оборудование / инвентарь' => 15,
      'Системы безопасности и охраны' => 15,
      'Спасательное оборудование' => 15,

      // Услуги - 16
      'Услуги защиты вещей от потери' => 16,
      'Услуги инкассации' => 16,
      'Детективные услуги' => 16,

      // Монтаж - 17
      'Монтаж охранно-пожарных систем' => 17,

      // Сейфы - 18
      'Сейфы' => 18,

    // Бытовая техника
    'Компьютеры / Бытовая техника / Офисная техника' => 99,

      // Аудио, фото, видео техника - 100
      'Аудиотехника / Видеотехника' => 100,
      'Музыкальные инструменты / Аксессуары' => 100,
      'Музыкальные пластинки' => 100,
      'Прокат оборудования для фотосъёмки / видеосъёмки' => 100,
      'Фототовары' => 100,

      // Бытовая техника - 101
      'Бытовая техника' => 101,
      'Запчасти / аксессуары для бытовой техники' => 101,
      'Кофемашины' => 101,

      // Компьютеры, оргтехника и комплектующие - 102
      'Компьютеры / Комплектующие' => 102,
      'Модернизация компьютеров' => 102,
      'Оргтехника' => 102,
      'Расходные материалы для оргтехники' => 102,
      'Сетевое оборудование' => 102,

      // Телефоны и аксессуары - 103
      // TODO

      // Электротехника - 104
      'Геодезическое оборудование' => 104,
      'Кабель / Провод' => 104,
      'Контрольно-измерительные приборы (КИПиА)' => 104,
      'Оборудование радиационного контроля' => 104,
      'Оптические приборы' => 104,
      'Радиоэлектронные приборы' => 104,
      'Светотехника' => 104,
      'Электродвигатели / Редукторы' => 104,
      'Электроизоляционные материалы' => 104,
      'Электронагревательное оборудование' => 104,
      'Электронные компоненты' => 104,
      'Электронные табло' => 104,
      'Электротехническая продукция' => 104,
      'Электроустановочная продукция' => 104,
      'Элементы питания' => 104,

    // Компьютеры и ПО
    'Интернет / Связь / Информационные технологии' => 44,

      // Автоматизация - 45
      'Автоматизация бизнес-процессов' => 45,
      'Автоматизация медицинских учреждений' => 45,
      'Автоматизация предприятий общественного питания' => 45,
      'Автоматизация производственных процессов' => 45,
      'Автоматизация торговли' => 45,

      // Бухгалтерские программы - 46
      'Бухгалтерские программы' => 46,

      // Разработка вебсайтов - 47
      'Разработка / поддержка / продвижение web-сайтов' => 47,

      // Разработка ПО - 48
      'Разработка компьютерных игр' => 48,
      'Разработка программного обеспечения для мобильных устройств' => 48,

    // Красота и здоровье - 49
      // СПА-салоны - 50
      'SPA-процедуры' => 50,

      // Парфюмерия, косметика - 51
      'Косметика / Парфюмерия' => 51,
      'Косметика / расходные материалы для салонов красоты' => 51,
      'Косметика ручной работы' => 51,
      'Косметические услуги' => 51,

      // Салоны красоты - 52
      'Парикмахерские' => 52,

      // Тату, пирсинг, стиль и визаж салоны - 53
      'Студии загара' => 53,
      'Тату-салоны' => 53,
      'Тонизирующие салоны' => 53,

      // Клубы, кружки - 54
      
      // Ювелирные издения, бижутерия и украшения - 55
      'Бижутерия' => 55,
      'Покупка драгоценных металлов / ювелирных изделий' => 55,
      'Ювелирные изделия' => 55,
      'Ювелирные камни' => 55,

      // Услуги - 57
      'Услуги визажиста' => 57,
      'Услуги имидж-консультанта' => 57,
      'Услуги массажиста' => 57,
      'Услуги по уходу за ресницами / бровями' => 57,
      'Услуги росписи по телу' => 57,

    // Мебель
    'Мебель / Материалы / Фурнитура' => 105,

      // Мягкая мебель - 106
      'Бескаркасная мебель' => 106,
      'Матрасы' => 106,
      'Мягкая мебель' => 106,

      // Мебель для дома - 107
      'Детская мебель' => 107,
      'Мебель для ванных комнат' => 107, 
      'Плетёная мебель / изделия' => 107,
      'Мебель для кухни' => 107,

      // Фурнитура - 108
      'Мебельная фурнитура' => 108,
      'Мебельные ткани' => 108,
      'Мебельные фасады' => 108,
      'Облицовочные материалы для мебели' => 108,

      // Мебель для офиса - 109
      'Мебель для медицинских учреждений и лабораторий' => 109,
      'Мебель для предприятий общественного питания' => 109,
      'Мебель для учебных и дошкольных учреждений' => 109,
      'Мебель из стекла' => 109,
      'Металлическая мебель для помещений' => 109,
      'Офисная мебель' => 109,

      // Разное - 110
      'Изготовление мебели под заказ' => 110,
      'Изделия из камня для помещений' => 110,
      'Корпусная мебель' => 110,
      'ЛДСП / ДВПО / МДФ' => 110,
      'Садово-парковая мебель / Аксессуары' => 110,
      'Сборка мебели' => 110,

    // Медицина - 111
    'Медицина / Здоровье / Красота' => 111,

      // Аптеки - 112
      'Аптеки' => 112,

      // Больницы - 113
      'Больницы' => 113,
      'Госпитали' => 113,

      // Поликлиники - 114
      'Детские поликлиники' => 114,
      'Взрослые поликлиники' => 114,

      // Медицинские центры, лаборатории - 115
      'Диагностические центры' => 115,
      'Диализные центры' => 115,
      'Медицинские лаборатории' => 115,
      'Зуботехнические лаборатории' => 115,
      'Многопрофильные медицинские центры' => 115,
      'Ортопедия и травматология' => 115,
      'Реабилитационные центры' => 115,
      'Центры альтернативной медицины' => 115,
      'Центры борьбы со СПИДом' => 115,
      'Центры диетологии / нутрициологии' => 115,
      'Центры иммунизации' => 115,
      'Центры мануальной терапии' => 115,
      'Центры планирования семьи' => 115,

      // Медицинское оборудование - 116
      'Массажное оборудование / приборы' => 116,
      'Медицинские приборы / аппараты' => 116,
      'Медицинское оборудование / инструмент' => 116,
      'Стоматологическое оборудование / материалы' => 116,

      // Оптика - 117
      'Оптика' => 117,

      // Пластическая хирургия - 118
      'Пластическая хирургия' => 118,

      // Медицинские товары - 119
      'Протезные / ортопедические товары' => 119,

      // Услуги - 120
      'Патронажные услуги' => 120,
      'Психологическая помощь в избавлении от зависимостей' => 120,
      'Услуги аллерголога / иммунолога' => 120,
      'Услуги ведения беременности' => 120,
      'Услуги врача-гомеопата' => 120,
      'Услуги гастроэнтеролога' => 120,
      'Услуги гематолога' => 120,
      'Услуги генетика / Генетические исследования' => 120,
      'Услуги гинеколога' => 120,
      'Услуги гирудотерапевта' => 120,
      'Услуги дерматовенеролога' => 120,
      'Услуги детских специалистов' => 120,
      'Услуги кардиолога' => 120,
      'Услуги логопеда' => 120,
      'Услуги маммолога' => 120,
      'Услуги невролога' => 120,
      'Услуги нефролога' => 120,
      'Услуги онколога' => 120,
      'Услуги офтальмолога' => 120,
      'Услуги по организации родов / лечения за рубежом' => 120,
      'Услуги проктолога' => 120,
      'Услуги психолога' => 120,
      'Услуги психотерапевта' => 120,
      'Услуги пульмонолога' => 120,
      'Услуги ревматолога' => 120,
      'Услуги рефлексотерапевта' => 120,
      'Услуги сексолога' => 120,
      'Услуги сомнолога' => 120,
      'Услуги терапевта' => 120,
      'Услуги трихолога' => 120,
      'Услуги уролога / андролога' => 120,
      'Услуги физиотерапевта' => 120,
      'Услуги флеболога' => 120,
      'Услуги хирурга' => 120,
      'Услуги эндокринолога' => 120,

      // Санатории - 121
      'Санатории / Профилактории' => 121,

      // Родильные дома - 122
      'Родильные дома' => 122,

      // Стоматология - 123
      'Стоматологические поликлиники' => 123,
      'Стоматологические центры' => 123,

      // Ветеринария - 209
      'Ветеринарные аптеки' => 209,
      'Ветеринарные клиники' => 209,
      'Ветеринарные лаборатории' => 209,

    // Недвижимость - 75
      
      // Агентства по недвижимости - 76
      'Агентства недвижимости' => 76,

      // Продажа недвижимости - 77
      'Продажа / аренда / обслуживание биотуалетов' => 77,
      'Продажа / аренда недвижимости за рубежом' => 77,      

      // Аренда недвижимости - 78
      'Аренда помещений' => 78,
      'Бизнес-центры' => 78,
      'Коворкинг' => 78,
      'Конференц-залы / Переговорные комнаты' => 78,

    // Оборудование - 79
      
      // Оборудование - 80,
      'Абразивный инструмент' => 80,
      'Бензиновое / дизельное оборудование' => 80,
      'Бензоинструмент' => 80,
      'Буровое оборудование' => 80,
      'Вендинговое оборудование' => 80,
      'Вентиляционное / тепловое оборудование' => 80,
      'Весовое оборудование' => 80,
      'Газовое оборудование' => 80,
      'Гидравлическое оборудование / инструмент' => 80,
      'Горно-шахтное оборудование' => 80,
      'Деревообрабатывающее оборудование' => 80,
      'Деревообрабатывающий инструмент' => 80,
      'Заточка / шлифовка режущих инструментов' => 80,
      'Звуковое / световое / видеооборудование' => 80,
      'Игорное оборудование / Аксессуары' => 80,
      'Изделия из стеклопластика' => 80,
      'Измерительный инструмент' => 80,
      'Каркасно-тентовые конструкции' => 80,
      'Клининговое оборудование / инвентарь' => 80,
      'Контрольно-кассовая техника / Расходные материалы' => 80,
      'Котельное оборудование / Котлы' => 80,
      'Малярный инструмент' => 80,
      'Металлообрабатывающее оборудование' => 80,
      'Металлорежущий инструмент' => 80,
      'Насосное оборудование' => 80,
      'Нефтегазовое оборудование' => 80,
      'Оборудование / инструмент для ювелирного производства' => 80,
      'Оборудование для 3D печати / Расходные материалы' => 80,
      'Оборудование для автоматизации промышленных предприятий' => 80,
      'Оборудование для автоматизации торговли' => 80,
      'Оборудование для автомоек' => 80,
      'Оборудование для автосервиса' => 80,
      'Оборудование для АЗС и нефтебаз' => 80,
      'Оборудование для бассейнов' => 80,
      'Оборудование для лабораторий' => 80,
      'Оборудование для нанесения полимерных покрытий' => 80,
      'Оборудование для пищевого производства' => 80,
      'Оборудование для предприятий общественного питания' => 80,
      'Оборудование для производства мебели' => 80,
      'Оборудование для производства металла' => 80,
      'Оборудование для производства окон' => 80,
      'Оборудование для производства строительных материалов' => 80,
      'Оборудование для производства, ремонта обуви / кожгалантереи' => 80,
      'Оборудование для промышленной маркировки' => 80,
      'Оборудование для салонов красоты' => 80,
      'Оборудование для сельского хозяйства' => 80,
      'Оборудование для фотоцентров' => 80,
      'Оборудование для химчисток / прачечных' => 80,
      'Оборудование для энергосбережения' => 80,
      'Окрасочное оборудование' => 80,
      'Очистители воздуха' => 80,
      'Пневматическое / компрессорное оборудование' => 80,
      'Пневмоинструмент' => 80,
      'Подшипники' => 80,
      'Полиграфическое оборудование' => 80,
      'Почтообрабатывающее оборудование' => 80,
      'Пресс-формы / Штампы' => 80,
      'Продажа / установка тёплых полов' => 80,
      'Продажа инфракрасных кабин' => 80,
      'Продажа курительных кабин' => 80,
      'Продажа платёжных терминалов / информационных киосков' => 80,
      'Проекционное оборудование' => 80,
      'Прокат мультимедийного / презентационного оборудования' => 80,
      'Прокат оборудования / инструментов' => 80,
      'Промышленные трубы / элементы трубопровода' => 80,
      'Резинотехнические изделия' => 80,
      'Сварочное оборудование' => 80,
      'Слесарно-монтажный инструмент' => 80,
      'Стеллажи / Витрины' => 80,
      'Строительное оборудование / Вспомогательные устройства' => 80,
      'Техника для склада / Вспомогательные устройства' => 80,
      'Торгово-выставочное оборудование' => 80,
      'Фасовочно-упаковочное оборудование' => 80,
      'Холодильное оборудование' => 80,
      'Швейное оборудование' => 80,
      'Электроинструмент' => 80,

      // Банковское оборудование - 81
      'Банковское оборудование' => 81,

      // Кондиционеры - 82
      'Кондиционеры' => 82,

    // Образование - 67
    
      // Курсы, тренинги, обучение - 68
      'Автошколы' => 68,
      'Бизнес-тренинги / семинары' => 68,
      'Бухгалтерские курсы' => 68,
      'Детские музыкальные школы' => 68,
      'Детские художественные школы' => 68,
      'Дизайнерские курсы' => 68,
      'Киношколы' => 68,
      'Компьютерные курсы' => 68,
      'Кулинарные курсы' => 68,
      'Курсы вокала' => 68,
      'Курсы диджеев' => 68,
      'Курсы сомелье' => 68,
      'Курсы творчества и рукоделия' => 68,
      'Личностные тренинги / семинары' => 68,
      'Модельные агентства' => 68,
      'Мотошколы' => 68,
      'Музыкальные курсы' => 68,
      'Обучение бизнес-профессиям' => 68,
      'Обучение за рубежом' => 68,
      'Обучение имидж-консультантов' => 68,
      'Обучение массажистов' => 68,
      'Обучение мастеров для салонов красоты' => 68,
      'Обучение по охране труда' => 68,
      'Обучение по промышленной безопасности' => 68,
      'Обучение рабочим профессиям' => 68,
      'Обучение сотрудников охраны' => 68,
      'Обучение судовождению' => 68,
      'Обучение фитнес-инструкторов' => 68,
      'Профессиональная переподготовка / Повышение квалификации' => 68,
      'Театральные курсы' => 68,
      'Тимбилдинг' => 68,
      'Фотошколы' => 68,
      'Центры раннего развития детей' => 68,
      'Школы иностранных языков' => 68,
      'Школы искусств' => 68,

      // Высшие учебные заведения - 69
      'Академии' => 69,
      'Институты' => 69,
      'Университеты' => 69, 

      // Гимназии, лицеи и частные школы - 70
      'Гимназии' => 70,
      'Лицеи' => 70,
      'Лицеи-интернаты' => 70,
      'Профессиональные лицеи' => 70,
      'Училища' => 70,

      // Детские сады - 71
      'Детские сады' => 71,
      'Начальные школы-детские сады / Прогимназии' => 71,
      'Частные детские сады' => 71,

      // Колледжи - 72
      'Колледжи' => 72,

      // Школы - 73
      'Школы' => 73,
      'Школы-интернаты' => 73,

      // Внешкольные учреждения - 74

    // Одежда, обувь и галантерея - 124
    'Одежда / Обувь' => 124,

      // Ателье - 125
      'Ателье обувные' => 125,
      'Ателье меховые / кожаные' => 125,
      'Ателье трикотажные' => 125,
      'Ателье швейные' => 125,
      'Мастерские / киоски по ремонту одежды' => 125,
      'Услуги вышивки' => 125,

      // Одежда - 126
      'Верхняя одежда' => 126,
      'Головные / шейные уборы' => 126,
      'Джинсовая одежда' => 126,
      'Меха / Дублёнки / Кожа' => 126,
      'Меховое / кожаное сырьё' => 126,
      'Нижнее бельё' => 126,
      'Спецобувь' => 126,
      'Школьная форма' => 126,

      // Детский мир - 127
      'Детская обувь' => 127,
      'Детская одежда' => 127,
      'Игрушки' => 127,

      // Разное - 128
      'Материалы для производства / ремонта обуви' => 128,
      'Трикотажные изделия' => 128,
      'Чулочно-носочные изделия' => 128,
      'Секонд-хенд' => 128,
      'Одежда / обувь для силовых структур' => 128,
      'Одежда / обувь для танцев' => 128,

      // Обувь - 129
      'Обувная косметика / Аксессуары' => 129,
      'Обувные магазины' => 129,
      'Обувь - опт' => 129,
      'Производство обуви' => 129,

      // Женская одежда - 130
      'Женская одежда' => 130,

      // Мужская одежда - 131
      'Мужская одежда' => 131,

      // Свадебные товары - 132
      'Свадебные товары' => 132,

      // Спецодежда - 133
      'Спецодежда / Средства индивидуальной защиты' => 133,

      // Галантерея - 134
      'Сумки / Кожгалантерея' => 134,

      // Аксессуары - 135
      'Сценические / карнавальные костюмы / Аксессуары' => 135,

      // Для беременных - 136
      'Товары для беременных / Товары для кормящих мам' => 136,

      // Для новорожденных - 137
      'Товары для новорождённых' => 137,

      // Для туризма и отдыха - 138

      // Спортивная одежда, обувь - 139
      'Спортивная одежда / обувь' => 139,

    // Производство, промышленность и сельское хозяйство - 140

      // Напитки - 141
      'Алкогольные напитки' => 141,
      'Безалкогольные напитки' => 141,
      'Минеральная вода' => 141,
      'Питьевая вода' => 141,

      // Пищевая промышленность - 142
      'Детское питание' => 142,
      'Диетические / соевые продукты' => 142,
      'Жир / Маслопродукты' => 142,
      'Зерно / Зерноотходы' => 142,
      'Ингредиенты / готовая продукция японской кухни' => 142,
      'Колбасные изделия' => 142,
      'Кондитерские изделия' => 142,
      'Консервированная продукция' => 142,
      'Макаронные изделия' => 142,
      'Мелкофасованные продукты питания' => 142,
      'Мясо / Полуфабрикаты' => 142,
      'Мясо птицы / Полуфабрикаты' => 142,
      'Овощи / Фрукты' => 142,
      'Орехи / Семечки' => 142,
      'Продукты быстрого приготовления' => 142,
      'Продукты пчеловодства' => 142,
      'Рыба / Морепродукты' => 142,
      'Сахар / Соль' => 142,
      'Снэковая продукция' => 142,
      'Специи / Пряности' => 142,
      'Сырьё для пищевой промышленности' => 142,
      'Фастфудная продукция - опт' => 142,
      'Хлебобулочные изделия' => 142,
      'Чай / Кофе' => 142,
      'Ягоды / Грибы' => 142,
      'Яйцо' => 142,

      // Молочная продукция - 143
      'Молочные продукты' => 143,
      'Мороженое' => 143,

      // Мукомольная продукция - 144
      'Мука / Крупы' => 144,

      // Производство растительного масла - 145
      // Недропользователи - 146
      // Текстильная промышленность - 147
      // Промышленные предприятия - 148
      
    // Связь и коммуникации - 58
    
      // Оборудование и аксессуары - 59
      'Аксессуары к мобильным телефонам' => 59,
      'Антенное оборудование' => 59,
      'Запчасти к мобильным телефонам' => 59,
      'Навигационное оборудование' => 59,
      'Коммутационное оборудование' => 59,

      // Сайты - 60
      'Виртуальные туры' => 60,
      'Городские информационные сайты' => 60,
      'Сайты объявлений' => 60,

      // Интернет-провайдеры - 61
      'Интернет-провайдеры' => 61,

      // Монтаж - 62
      'Монтаж / обслуживание антенного оборудования' => 62,
      'Монтаж телефонных сетей' => 62,

      // Кабельное ТВ - 63
      'Операторы кабельного телевидения' => 63,

      // Операторы сотовой связи - 64
      'Операторы сотовой связи' => 64,

      // Платежные системы - 65
      'Платёжные системы интернета' => 65,

      // Хостинг - 66
      'Хостинг' => 66,

    // Спорт - 149

      // Спортивные комплексы - 150
      'Авиационные клубы' => 150,
      'Батутные центры' => 150,
      'Гольф-клубы' => 150,
      'Картинг / Автоцентры / Мотоцентры' => 150,
      'Лыжные базы / Горнолыжные комплексы' => 150,
      'Рыболовные / охотничьи центры' => 150,
      'Фитнес-клубы' => 150,
      'Центры йоги' => 150,
      'Яхт-клубы' => 150,
      'Скалодромы' => 150,

      // Бассейны - 151
      'Бассейны' => 151,

      // Спортивные кружки - 152
      'ВУМ гимнастика для женщин' => 152,
      'Детские лагеря' => 152,
      'Занятия по аквааэробике' => 152,
      'Обучение танцам' => 152,
      'Организация активных туров' => 152,
      'Спортивные секции' => 152,
      'Спортивно-интеллектуальные клубы' => 152,
      'Спортивно-технические клубы' => 152,
      'Профессиональные спортивные клубы' => 152,
      'Велосипеды' => 152,

      // Спортивные площадки, стадионы - 153
      'Конные клубы / Ипподромы' => 153,
      'Ледовые дворцы / Катки' => 153,
      'Стадионы' => 153,
      'Теннисные корты' => 153,

      // Спортивные школы - 154
      'Спортивные школы' => 154,

      // Тренажерные залы - 155
      'Тренажёрные залы' => 155,
      'Велнес-залы' => 155,

    // Строительство - 156
    
      // Строительные материалы - 157
      'Автоматические ворота / шлагбаумы' => 157,
      'Автоматические двери' => 157,
      'Асбестотехническая продукция' => 157,
      'Бетон / Раствор' => 157,
      'Вторичные строительные материалы' => 157,
      'Входные двери' => 157,
      'Герметики / Клеи' => 157,
      'Гидроизоляционные материалы' => 157,
      'Гипсокартон / Комплектующие' => 157,
      'Грязепоглощающие покрытия' => 157,
      'Декоративные элементы / покрытия' => 157,
      'ДСП / ДВП / Фанера' => 157,
      'Железобетонные изделия' => 157,
      'Заборы / Ограждения' => 157,
      'Замки / Скобяные изделия' => 157,
      'Звукоизоляционные материалы' => 157,
      'Изготовление витражей / мозаики' => 157,
      'Керамическая плитка / Кафель' => 157,
      'Керамогранит' => 157,
      'Кирпич' => 157,
      'Комплектующие для дверей' => 157,
      'Комплектующие для окон' => 157,
      'Крепёжные изделия' => 157,
      'Кровельные материалы' => 157,
      'Лакокрасочные материалы' => 157,
      'Материалы для дорожного строительства' => 157,
      'Межкомнатные двери' => 157,
      'Металлоконструкции для строительства зданий / сооружений' => 157,
      'Напольные покрытия / Комплектующие' => 157,
      'Натяжные потолки' => 157,
      'Облицовочный камень' => 157,
      'Обои' => 157,
      'Огнезащитные материалы' => 157,
      'Огнеупорные материалы / изделия' => 157,
      'Окна' => 157,
      'Оргстекло / Поликарбонат' => 157,
      'Отделочные материалы' => 157,
      'Песок / Щебень' => 157,
      'Пиломатериалы / Лесоматериалы' => 157,
      'Погонажные изделия' => 157,
      'Подвесные потолки' => 157,
      'Порошковые краски' => 157,
      'Резиновые покрытия / Комплектующие' => 157,
      'Светопрозрачные конструкции' => 157,
      'Системы водоотведения' => 157,
      'Системы перегородок' => 157,
      'Стекло / Зеркала' => 157,
      'Стекломагнезитовые листы' => 157,
      'Стеновые панели' => 157,
      'Строительные блоки' => 157,
      'Строительные материалы' => 157,
      'Сухие строительные смеси' => 157,
      'Сэндвич-панели' => 157,
      'Теплоизоляционные материалы' => 157,
      'Тонировочные / защитные плёнки для стёкол зданий, конструкций' => 157,
      'Тротуарная плитка' => 157,
      'Фасадные материалы / конструкции' => 157,
      'Цемент' => 157,

      // Строительное оборудование - 158
      'Гидромассажное оборудование' => 158,
      'Оборудование для очистки воды' => 158,

      // Проектные организации - 159
      'Архитектурно-строительное проектирование' => 159,
      'Изготовление макетов / Прототипирование' => 159,
      'Проектирование / обслуживание систем освещения' => 159,
      'Проектирование дорог / мостов' => 159,
      'Проектирование инженерных систем' => 159,
      'Проектирование объектов добычи полезных ископаемых' => 159,

      // Сантехника, керамические изделия - 160
      'Сантехника / Санфаянс' => 160,
      'Ремонт / установка сантехнического оборудования' => 160,

      // Отопительные и водонагревательное оборудование - 161
      'Системы отопления / водоснабжения / канализации' => 161,

      // Строительство - 162
      'Промышленное строительство' => 162,
      'Строительство / монтаж бассейнов, аквапарков' => 162,
      'Строительство / обслуживание наружных систем газоснабжения' => 162,
      'Строительство / обслуживание наружных систем отопления / водоснабжения / канализации' => 162,
      'Строительство / обслуживание фонтанов' => 162,
      'Строительство / обслуживание электросетей' => 162,
      'Строительство / ремонт дорог' => 162,
      'Строительство административных зданий' => 162,
      'Строительство бань / саун' => 162,
      'Строительство гаражей' => 162,
      'Строительство дач / коттеджей' => 162,
      'Строительство заправочных станций' => 162,
      'Строительство и обслуживание АЭС / ГЭС / ТЭЦ' => 162,
      'Строительство канатных дорог / фуникулеров' => 162,
      'Строительство многоквартирных домов' => 162,
      'Строительство мостов / тоннелей / метрополитена' => 162,
      'Строительство сооружений сельскохозяйственного назначения' => 162,
      'Строительство спортивных сооружений / площадок' => 162,

      // Услуги - 163
      'Автоматизация инженерных систем' => 163,
      'Алмазное бурение / резка' => 163,
      'Антикоррозийная обработка металлоконструкций' => 163,
      'Буровые работы' => 163,
      'Взрывные работы' => 163,
      'Высотные работы' => 163,
      'Геодезические работы' => 163,
      'Геологические работы' => 163,
      'Геофизические работы' => 163,
      'Гидрогеологические работы' => 163,
      'Гидроизоляционные работы' => 163,
      'Гидротехническое строительство' => 163,
      'Девелоперские услуги' => 163,
      'Деревообработка' => 163,
      'Звукоизоляционные работы' => 163,
      'Земляные работы' => 163,
      'Инжиниринговые услуги' => 163,
      'Кадастровые работы / Техническая инвентаризация, учет' => 163,
      'Кровельные работы' => 163,
      'Ландшафтная архитектура' => 163,
      'Монтаж климатических систем' => 163,
      'Обслуживание внутренних систем отопления / водоснабжения / канализации' => 163,
      'Остекление / отделка балконов и лоджий' => 163,
      'Полимерная порошковая окраска' => 163,
      'Свайные работы' => 163,
      'Сварочные работы' => 163,
      'Сервисное обслуживание бассейнов' => 163,
      'Снос зданий / сооружений' => 163,
      'Согласование перепланировок' => 163,
      'Теплоизоляционные работы' => 163,
      'Тонирование стёкол зданий / конструкций' => 163,
      'Услуга распиловки' => 163,
      'Услуги по устройству промышленных / наливных полов' => 163,
      'Фасадные работы' => 163,
      'Экологические работы' => 163,
      'Электроизмерительные работы' => 163,
      'Электромонтажные работы' => 163,

      // Экспертиза - 164
      'Техническая экспертиза зданий и сооружений' => 164,

      // Реконструкция, ремонт - 165
      'Реконструкция и капремонт зданий' => 165,
      'Ремонт / отделка помещений' => 165,
      'Ремонт / укладка напольных покрытий' => 165,
      'Ремонт окон' => 165,

    // Торговля - 166
    
      // Хозяйственные товары - 167
      'Биотопливо' => 167,
      'Бумажная упаковка' => 167,
      'Бытовая химия' => 167,
      'Гофротара' => 167,
      'Деревянная тара' => 167,
      'Металлическая / жестяная тара' => 167,      
      'Офисная бумага' => 167,
      'Пакеты / Плёнки' => 167,
      'Питомники растений' => 167,
      'Пластиковая тара' => 167,
      'Подарочная упаковка' => 167,
      'Садово-огородный инвентарь / техника' => 167,
      'Семена / Посадочный материал' => 167,
      'Средства защиты от вредителей' => 167,
      'Средства защиты растений / Удобрения' => 167,
      'Стеклянная тара' => 167,
      'Теплицы' => 167,
      'Укрывной материал' => 167,
      'Упаковочные материалы' => 167,
      'Услуги по упаковке подарков' => 167,
      'Хозяйственные товары' => 167,

      // Канцтовары, книги - 168
      'Календари / Открытки' => 168,
      'Канцелярские товары / Учебные принадлежности' => 168,
      'Книги' => 168,
      'Учебная литература' => 168,

      // Свадебные и цветочные салоны - 169
      'Доставка цветов' => 169,
      'Цветы' => 169,

      // Спорттовары - 170
      'Прокат спортивного инвентаря / техники' => 170,
      'Детское игровое оборудование / Аксессуары' => 170,
      'Снаряжение для туризма и отдыха' => 170,
      'Спортивное оборудование' => 170,
      'Спортивное питание' => 170,
      'Спортивно-наградная продукция' => 170,
      'Спортивно-развлекательное оборудование / Аксессуары' => 170,
      'Спортивный инвентарь' => 170,
      'Товары для конного спорта' => 170,
      'Товары для подводного плавания' => 170,
      'Водно-спортивный транспорт / техника' => 170,

      // Шторы, гардины и жалюзи - 171
      'Жалюзи' => 171,
      'Портьерные ткани / Шторы' => 171,

      // Товары для животных - 172
      'Аквариумы' => 172,
      'Ветеринарные препараты' => 172,
      'Животноводство' => 172,
      'Зоотовары / Домашние питомцы' => 172,

      // Супермаркеты - 173
      'Гипермаркеты' => 173,
      'Супермаркеты' => 173,

      // Мебель - 174
      'Надувная мебель / бассейны' => 174,

      // Рынки - 175
      'Рынки' => 175,

      // Торговые организации - 176

      // Зоомагазины - 177

      // Торговые центры - 178
      'Торгово-развлекательные центры / Моллы' => 178,
      'Торговые центры / Универсальные магазины' => 178,
      'Торговые центры товаров для интерьера / ремонта' => 178,

      // Охота и рыбалка - 179
      'Товары для охоты' => 179,
      'Товары для рыбалки' => 179,

      // Посуда - 180
      'Одноразовая посуда' => 180,
      'Посуда' => 180,

    // Транспорт - 181

      // Аэропорты - 182
      'Аэропорты' => 182,

      // Железнодорожные вокзалы - 183
      'Железнодорожные вокзалы и станции' => 183,

      // Билеты - 184
      'Железнодорожные билеты' => 184,
      'Авиабилеты' => 184,
      'Проездные билеты / Транспортные карты' => 184,
      'Автобусные билеты' => 184,

      // Автовокзалы - 185
      'Автовокзалы / Автостанции' => 185,

    // Туризм - 186
    
      // Базы отдыха - 187
      'Базы отдыха' => 187,

      // Гостиницы - 188
      'Бронирование гостиниц' => 188,
      'Гостевые дома' => 188,
      'Гостиницы' => 188,
      'Хостелы' => 188,

      // Туристические агентства - 189
      'Круизы / Морские, речные прогулки' => 189,
      'Туристические агентства' => 189,

      // Туроператоры - 190
      'Туроператоры' => 190,

    // Услуги и сервис - 191
    
      // Юридические услуги - 192
      'Ведение дел в судах' => 192,
      'Миграционные услуги' => 192,
      'Нотариальные услуги' => 192,
      'Юридическое обслуживание' => 192,

      // Изготовление печатей - 193
      'Изготовление печатей / штампов' => 193,

      // Ремонт - 194
      'Ремонт / заправка автокондиционеров' => 194,
      'Ремонт / тюнинг мототехники' => 194,
      'Ремонт автобусов' => 194,
      'Ремонт автоэлектрики' => 194,
      'Ремонт АКПП' => 194,
      'Ремонт бензиновых двигателей' => 194,
      'Ремонт выхлопных систем' => 194,
      'Ремонт грузовых автомобилей' => 194,
      'Ремонт дизельных двигателей' => 194,
      'Ремонт карбюраторов / инжекторов' => 194,
      'Ремонт МКПП' => 194,
      'Ремонт спецтехники' => 194,
      'Ремонт топливной аппаратуры дизельных двигателей' => 194,
      'Ремонт ходовой части автомобиля' => 194,
      'Ремонт электронных систем управления автомобиля' => 194,
      'Установка / ремонт автомобильной оптики' => 194,
      'Установка / ремонт автостёкол' => 194,
      'Ремонт мобильных устройств связи' => 194,
      'Ремонт очков' => 194,
      'Ремонт часов' => 194,
      'Ремонт / установка бытовой техники' => 194,
      'Ремонт аудио / видео / цифровой техники' => 194,
      'Ремонт компьютеров' => 194,
      'Ремонт оргтехники' => 194,
      'Ремонт / реставрация мебели' => 194,
      'Ремонт медицинского оборудования / инструментов' => 194,
      'Ремонт / обслуживание климатического оборудования' => 194,
      'Ремонт мультимедийного / презентационного / светового оборудования' => 194,
      'Ремонт промышленного оборудования' => 194,
      'Ремонт торгового оборудования' => 194,
      'Ремонт электроинструмента' => 194,
      'Ремонт спортивного инвентаря' => 194,
      'Ремонт / изготовление ювелирных изделий' => 194,
      'Строительство / ремонт железных дорог' => 194,
      'Ремонт железнодорожного оборудования / техники' => 194,
      'Ремонт электродвигателей' => 194,

      // Вскрытие замков - 195
      'Вскрытие / обслуживание замков, дверей' => 195,

      // Химчистка - 196
      'Прачечные' => 196,
      'Химчистки одежды / текстиля' => 196,
      'Чистка / реставрация пухо-перьевых изделий' => 196,
      
      // Клининговые услуги - 197
      'Профессиональная уборка' => 197,

      // Компьютерные услуги - 198
      'Фото на документы' => 198,
      'Заправка картриджей' => 198,
      'Монтаж компьютерных сетей' => 198,
      'Услуги системного администрирования' => 198,

      // Дизайн услуги - 199
      'Дизайн рекламы' => 199,
      'Дизайн / моделирование ювелирных изделий' => 199,
      'Дизайн интерьеров' => 199,

      // Разное - 200
      'Изготовление ключей' => 200,
      'Службы знакомств' => 200,

      // Реклама - 201
      'Indoor-реклама (реклама в помещениях)' => 201,
      'PR / Связи с общественностью' => 201,
      'Агентства по подписке печатных изданий' => 201,
      'Изготовление рекламных конструкций' => 201,
      'Материалы для наружной рекламы' => 201,
      'Размещение наружной рекламы' => 201,
      'Размещение рекламы в интернете' => 201,
      'Размещение рекламы в СМИ' => 201,
      'Размещение рекламы на транспорте' => 201,
      'Рекламные агентства полного цикла' => 201,
      'Световая реклама' => 201,
      'Согласование наружной рекламы' => 201,

      // Видеостудии - 202
      'Видеостудии' => 202,

      // СМИ - 203
      'Радиостанции' => 203,
      'Телеканалы' => 203,
      'Телекомпании / Радиокомпании' => 203,
      'Журналы' => 203,
      'Газеты' => 203,

      // Полиграфия - 204
      'Расходные материалы для полиграфии' => 204,
      'Бумага для полиграфии' => 204,
      'Оперативная полиграфия' => 204,
      'Офсетная печать' => 204,
      'Полиграфические услуги' => 204,

      // Типографии и издательства - 205

      // Справочники - 206
      'Справочники' => 206,

      // Звукозапись - 207
      'Студии звукозаписи' => 207,

      // Фотостудии - 208
      'Фотостудии' => 208,
      'Фотоцентры' => 208,
      'Изготовление фотокниг' => 208,

    // Финансовые услуги - 19

      // Банки - 20
      'Банки' => 20,
      'Банкоматы' => 20,
      'Оценка собственности' => 20,

      // Бухгалтерские услуги - 21
      'Бухгалтерские услуги' => 21,

      // Ломбарды - 22
      'Ломбарды' => 22,

      // Микрокредитные организации, лизинг - 23
      'Микрофинансирование' => 23,

      // Биржи - 24
      'Инвестиционные компании' => 24,
      'Операции на фондовом рынке' => 24,

      // Обмен валюты - 25
      'Пункты обмена валют' => 25,

      // Страховые компании - 26
      'Страхование' => 26,

      // Аудит, консалтинг - 27
      // Таможенные услуги - 28

      // Терминалы - 29
      'Платёжные терминалы' => 29,
      'Пункты приёма платежей / Расчётные центры коммунальных услуг' => 29,
    ];







    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        // $this->getFromGis();
        // $this->seedGis();
        // $this->fixOrgs();
        // $this->findWhatToDeleteOrgs();
        // $this->fixBranches();
        // $this->findWhatToDeleteBranches();

        // $this->fixPhones();
        // $this->findWhatToDeletePhones();
        // $this->fixSocials();
        // $this->findWhatToDeleteSocials();

        // $this->removeDuplicates();

      // $this->getOrgIds();
      $this->getBranches();


      // $this->fixBranchCategory();

        $this->info("DONE");
    }


    private function fixBranchCategory()
    {
      $path = public_path() . "/data/branches/";
      $files = File::allFiles($path);

      $inc = 0;
      $total = count($files);

      foreach ($files as $key => $file)
      {
            $inc += 1;
            $branches = json_decode(File::get($file));
            // dd(count($branches));

            $entries = DB::table('branch_category')->whereIn('branch_id', $branches)->delete();
            // dd(count($entries));

            $this->info($total - $inc . " left");
        }

        dd("DONE");
    }

    private function removeDuplicates()
    {
        DB::table('organizations')->where('notes', 'delete')->delete();
        DB::table('branches')->where('name', 'delete')->delete();
        DB::table('phones')->where('contact_person', 'delete')->delete();
        DB::table('socials')->where('contact_person', 'delete')->delete();

        // dd("DONE");
    }

    private function fixBranches()
    {
        $dataBranches = [];
        $inc = 0;

        DB::table('organizations')
            ->where('notes', 'delete')
            ->chunk(1000, function($organizations) use (&$dataBranches, &$inc) 
        {
            // dd($organizations);
            foreach ($organizations as $organization)
            {
                $inc += 1;
                  
                $branches = DB::table('branches')
                    ->where('organization_id', $organization->id)
                    ->lists('id');

                if (empty($branches)) continue;

                foreach ($branches as $branch)
                {
                    $dataBranches[] = $branch;
                }                
            }

            File::put(public_path() . "/data/branches/" . uniqid() . ".txt", json_encode($dataBranches));
            $this->info($inc);
        });

        dd("DONE");
    }

    private function fixPhones()
    {
        // $dataPhones = [];
        // $dataSocials = [];
        $inc = 0;

        DB::table('branches')
            ->where('name', 'delete')
            ->chunk(1000, function($branches) use (&$inc) 
        {
            $dataPhones = [];

            // dd($organizations);
            foreach ($branches as $branch)
            {
                $inc += 1;
                  
                $phones = DB::table('phones')
                    ->where('branch_id', $branch->id)
                    ->lists('id');
                // dd($phones);

                if (empty($phones)) continue;

                foreach ($phones as $phone)
                {
                    $dataPhones[] = $phone;
                }
                // dd($dataPhones);
            }

            File::put(public_path() . "/data/phones/" . uniqid() . ".txt", json_encode($dataPhones));
            $this->info($inc);
        });

        dd("DONE");
    }

    private function fixSocials()
    {
        // $dataPhones = [];
        // $dataSocials = [];
        $inc = 0;

        DB::table('branches')
            ->where('name', 'delete')
            ->chunk(1000, function($branches) use (&$inc) 
        {
            $dataSocials = [];

            // dd($organizations);
            foreach ($branches as $branch)
            {
                $inc += 1;
                  
                $socials = DB::table('socials')
                    ->where('branch_id', $branch->id)
                    ->lists('id');
                // dd($socials);

                if (empty($socials)) continue;

                foreach ($socials as $social)
                {
                    $dataSocials[] = $social;
                }
                // dd($dataPhones);
            }

            File::put(public_path() . "/data/socials/" . uniqid() . ".txt", json_encode($dataSocials));
            $this->info($inc);
        });

        dd("DONE");
    }

    private function findWhatToDeleteSocials()
    {
        $path = public_path() . "/data/socials/";
        $files = File::allFiles($path);

        $inc = 0;
        $total = count($files);

        foreach ($files as $key => $file)
        {
            $inc += 1;
            $socials = json_decode(File::get($file));

            DB::table('socials')->whereIn('id', $socials)->update(['contact_person' => 'delete']);

            $this->info($total - $inc . " left");
        }

        dd("DONE");
    }

    private function findWhatToDeletePhones()
    {
        $path = public_path() . "/data/phones/";
        $files = File::allFiles($path);

        $inc = 0;
        $total = count($files);

        foreach ($files as $key => $file)
        {
            $inc += 1;
            $phones = json_decode(File::get($file));

            DB::table('phones')->whereIn('id', $phones)->update(['contact_person' => 'delete']);

            $this->info($total - $inc . " left");
        }

        dd("DONE");
    }

    private function findWhatToDeleteBranches()
    {
        $path = public_path() . "/data/branches/";
        $files = File::allFiles($path);

        $inc = 0;
        $total = count($files);

        foreach ($files as $key => $file)
        {
            $inc += 1;
            $branches = json_decode(File::get($file));

            DB::table('branches')->whereIn('id', $branches)->update(['name' => 'delete']);

            $this->info($total - $inc . " left");
        }

        dd("DONE");
    }

    private function findWhatToDeleteOrgs()
    {
        $path = public_path() . "/data/orgs/";
        $files = File::allFiles($path);

        $inc = 0;
        $total = count($files);

        foreach ($files as $key => $file)
        {
            $inc += 1;
            // if ($key < 5) continue;

            $data = json_decode(File::get($file));
            if (empty($data)) continue;

            // dd($data);
            $test = [];

            // $nextDD = false;
            foreach ($data as $key => $item)
            {                
                $orgs = [];

                foreach ($item as $orgId => $org)
                {
                    $orgs[] = $org;
                }

                $toDelete = [];
                foreach ($orgs as $key => $org)
                {
                    if ($key == 0) continue;
                    $toDelete[] = $org->id;
                }

                // update organizations
                DB::table('organizations')->whereIn('id', $toDelete)->update(['notes' => 'delete']);
                // dd("DONE");
            }

            $this->info($total - $inc . " left");
        }

        dd("DONE");
    }        

    private function fixOrgs()
    {
        $inc = 0;
        $dataOrgs = [];

          $orgs = DB::table('organizations')
                // ->where('city_id', 3)
                ->where('id', '>=', 25317)
                ->where('notes', '!=', 'delete')
                ->orderBy('id')
                // ->orderBy('name')
                ->chunk(55000, function($orgs) use (&$inc)
          {
                $dataOrgs = [];
                
                foreach ($orgs as $key => $org)
                {
                      $inc += 1;

                      if (!isset($dataOrgs[$org->notes]))
                      {
                            $dataOrgs[$org->notes] = [];
                      }
                      
                      $dataOrgs[$org->notes][$org->id] = $org;
                }

                $toWrite = [];
                foreach ($dataOrgs as $key => $org)
                {
                    if (count($org) <= 1) continue;
                    $toWrite[$key] = $org;
                }

                File::put(public_path() . '/data/orgs/' . uniqid() . ".txt", json_encode($toWrite));
                $this->info($inc);
          });

        
      
        dd("DONE");
    }


    private function getFromGis()
    {
        $src = File::get(public_path() . "/data/rubrics-astana.js");
        $data = json_decode($src);
        // dd($data);

        $rubrics = [];
        $orgCount = 0;
        $branchCount = 0;

        foreach ($data->result->items as $item)
        {
            foreach ($item->rubrics as $rubric)
            {
                $rubrics[] = [
                    'id' => $rubric->id,
                    'name' => $rubric->name,
                    'org_count' => $rubric->org_count,
                    'branch_count' => $rubric->branch_count,
                    'parent' => $item->name
                ];

                $branchCount += $item->branch_count;
            }

            $orgCount += $item->org_count;
        }

        // dd([$orgCount, $branchCount, $rubrics]);
        $loadedRubrics = [];
        
        $length = count($rubrics);
        foreach ($rubrics as $key => $rubric)
        {
            // if (in_array($rubric['id'], $loadedRubrics)) continue;
            if ($key < 190) continue;
            // if (in_array($rubric['name'], $loadedRubrics)) continue;
            // $this->info($rubric['id']);dd('...');

            $proxy = $this->getRandomProxy();
            // dd($proxy);

            $opts = array(
                'https'=>array(
                    'method'=>"GET",
                    'proxy' => $proxy,
                ),
                "ssl" => array(
                    "verify_peer"=>false,
                    "verify_peer_name"=>false,
                )
            );
            $context = stream_context_create($opts);

            $data = file_get_contents("https://catalog.api.2gis.ru/2.0/catalog/branch/list?page=1&page_size=12&rubric_id=" . $rubric['id'] . "&hash=b0fbb1953a710af0&stat%5Bpr%5D=3&region_id=68&fields=items.region_id%2Citems.adm_div%2Citems.contact_groups%2Citems.flags%2Citems.address%2Citems.rubrics%2Citems.name_ex%2Citems.point%2Citems.external_content%2Citems.schedule%2Citems.org%2Citems.ads.options%2Citems.reg_bc_url%2Crequest_type%2Cwidgets%2Cfilters%2Citems.reviews%2Ccontext_rubrics%2Chash%2Csearch_attributes&key=ruczoy1743", false, $context);

            $data = json_decode($data);

            if ($data->meta->code == 404) 
            {
                $this->info("no results for " . $rubric['id']);
                continue;
            }

            $total = $data->result->total;
            $numOfPages = intval(ceil($total / 50.0));

            if ($numOfPages == 1)
            {
                $this->downloadItems($rubric['id'], 1);
            }
            else
            {
                for ($i = 1; $i <= $numOfPages; $i++) 
                {
                    $this->downloadItems($rubric['id'], $i);
                }
            }

            $this->info("DONE rubric. Left: " . ($key + 1) . "/" . $length);
        }
    }

    private function downloadItems($rubricId, $pageNum)
    {
        $proxy = $this->getRandomProxy();

        $path = public_path() . "/data/gis-astana/";
        $url = "https://catalog.api.2gis.ru/2.0/catalog/branch/list?page=" . $pageNum . "&page_size=50&rubric_id=" . $rubricId . "&hash=b0fbb1953a710af0&stat%5Bpr%5D=3&region_id=68&fields=items.region_id%2Citems.adm_div%2Citems.contact_groups%2Citems.flags%2Citems.address%2Citems.rubrics%2Citems.name_ex%2Citems.point%2Citems.external_content%2Citems.schedule%2Citems.org%2Citems.ads.options%2Citems.reg_bc_url%2Crequest_type%2Cwidgets%2Cfilters%2Citems.reviews%2Ccontext_rubrics%2Chash%2Csearch_attributes&key=ruczoy1743";

        $opts = array(
            'https' => array(
                'method'=>"GET",
                'proxy' => $proxy,
            ),
            "ssl" => array(
                "verify_peer"=>false,
                "verify_peer_name"=>false,
            )
        );
        $context = stream_context_create($opts);

        $data = file_get_contents($url, false, $context);
        file_put_contents($path . $rubricId . "-" . $pageNum . ".json", $data);
    }

    private function getRandomProxy()
    {
        $proxies = [];

        $handle = fopen(public_path() . "/data/proxies.txt", "r");
        if ($handle) 
        {
            while (($line = fgets($handle)) !== false) 
            {
                $proxies[] = trim($line);
            }

            fclose($handle);
        }

        return $proxies[array_rand($proxies)];
    }


    private function seedGis()
    {
        // $this->removeOrganizations();

        // $limit = $this->argument('limit');

        $cities = [
            '67' => 3,
            '68' => 2,
        ];

        $count = 0;

        $pathes = [
            public_path() . "/data/gis-astana/part-1/",
            public_path() . "/data/gis-astana/part-2/",
            public_path() . "/data/gis-astana/part-3/",
        ];

        $allCategories = [];
        $total = 42293;
        $bar = $this->output->createProgressBar($total);
        $inc = 0;

        foreach ($pathes as $path)
        {
            $files = File::allFiles($path);

            foreach ($files as $file)
            {
                $data = json_decode(File::get($file));

                foreach ($data->result->items as $key => $object)
                {
                    // dd($object);
                    // if ($key < 4) continue;
                    // $inc += 1;

                    // if ($inc <= 21194) continue;

                    try
                    {
                        $orgCityId = "";
                        $orgUrl = "";
                        $orgCategory = "";
                        $orgAddress = "";
                        $orgWorkingHours = "";
                        $orgContacts = [];
                        $orgSite = "";
                        $orgEmail = "";
                        $orgDescription = "";
                        $orgName = "";
                        $orgLat = "";
                        $orgLng = "";

                        // dd($object);

                        if ($object->name == "" || $object->name == "БЕЗ НАЗВАНИЯ") continue;

                        $city = $object->region_id;
                        $orgId = $object->org->id;
                        $orgCityId = $cities[$city];
                        // dd([$orgId, $orgCityId]);
                        
                        // categories
                        $categories = [];
                        foreach ($object->rubrics as $rubric)
                        {
                            // dd($rubric);
                            if (isset($this->categoriesMap[$rubric->name]))
                            {
                                // dd($this->categoriesMap[$rubric->name]);
                                $categories[] = $this->categoriesMap[$rubric->name];
                            }
                        }
                        // dd($categories);

                        // address
                        $orgAddress = isset($object->address_name) ? $object->address_name : "";
                        // dd($orgAddress);
                        
                        $weekDays = [
                            "Mon" => "Пн", "Tue" => "Вт", "Wed" => "Ср", "Thu" => "Чт", 
                            "Fri" => "Пт", "Sat" => "Сб", "Sun" => "Вс"
                        ];

                        // working hours
                        $workingHours = [];
                        if (isset($object->schedule))
                        {
                            foreach ($object->schedule as $day => $whs)
                            {
                                if ($day == "comment") continue;

                                foreach ($whs as $wh)
                                {
                                    $from = $to = "";

                                    if (isset($wh[0])) $from = $weekDays[$day] . ": " . $wh[0]->from . "-" . $wh[0]->to;
                                    if (isset($wh[1])) $to = $wh[1]->from . "-" . $wh[1]->to;

                                    $workingHours[] = $from . " " . $to;
                                }
                            }
                        }
                        
                        // dd($workingHours);
                        $orgWorkingHours = isset($object->schedule) ? implode("\n", $workingHours) : "";
                        
                        // contacts
                        $orgContacts = [];
                        $orgSites = [];

                        foreach ($object->contact_groups as $contactGroup)
                        {
                            foreach ($contactGroup->contacts as $contact)
                            {
                                if ($contact->type == "phone" || $contact->type == "fax") 
                                    $orgContacts[] = $contact;

                                if ($contact->type == "website" || $contact->type == "instagram" ||
                                    $contact->type == "vkontakte" || $contact->type == "twitter" ||
                                    $contact->type == "facebook") 
                                    $orgSites[] = $contact;
                            }                   
                        }
                        // dd($orgContacts);

                        // email
                        $orgEmail = "";

                        // description & production
                        $orgDescription = "";
                        // dd($orgDescription);

                        // lat
                        $orgLat = isset($object->point->lat) ? $object->point->lat : "0.00";
                        // dd($orgLat);

                        // lng
                        $orgLng = isset($object->point->lon) ? $object->point->lon : "0.00";
                        // dd($orgLng);

                        // name
                        $orgName = $object->name;
                        // dd($orgName);
                        
                        // insert to organizations, branches, phones, socials
                        DB::beginTransaction();

                        // $orgExists = Organization::where('notes', $orgId)->first();
                        // if ($orgExists) continue;

                        $organization = Organization::create([
                            "name"          => $orgName,
                            "type"          => "custom",
                            "description"   => $orgDescription,
                            "status"        => 'published',
                            "notes"         => $orgId
                        ]);
                        // dd($organization->toArray());
                        
                        $postcode = isset($object->address->postcode) ? $object->address->postcode : "";

                        $branch = Branch::create([
                            "organization_id"   => $organization->id,
                            "type"              => "main",
                            "name"              => $organization->name,
                            "description"       => $object->id,
                            "city_id"           => $orgCityId,
                            "address"           => $orgAddress,
                            "post_index"        => $postcode,
                            "email"             => $orgEmail,
                            "hits"              => 0,
                            "lat"               => $orgLat,
                            "lng"               => $orgLng,
                            "working_hours"     => $orgWorkingHours,
                            "status"            => "published"
                        ]);
                        // dd($branch->toArray());

                        // map branch to category!
                        foreach ($categories as $categoryId)
                        {
                            $exists = DB::table('branch_category')
                                ->where('branch_id', $branch->id)
                                ->where('category_id', $categoryId)
                                ->first();

                            if (!$exists)
                            {
                                $pivotRecord = DB::table("branch_category")->insert([
                                    "branch_id"   => $branch->id,
                                    "category_id" => $categoryId
                                ]);
                                // dd($pivotRecord);
                            }
                        }                        

                        foreach ($orgContacts as $phone)
                        {
                            $type = $codeCountry = $codeOperator = $number = "";

                            // type
                            // $fb = strpos($phone, "(");
                            // $lb = strpos($phone, ")");
                            // $codeOperator = substr($phone, $fb + 1, $lb - $fb - 1);
                            
                            // number
                            // $number = substr($phone, $lb + 1);
                            // $number = str_replace("-", "", trim($number));
                            $number = $phone->value;
                            // dd($number);

                            // if (!empty($codeOperator) && strlen($codeOperator) == 3 && $codeOperator[1] != "1" && $codeOperator[1] != "2")
                            // {
                            //     $type = "mobile";
                            // }
                            // else
                            // {
                            //     $type = "work";
                            // }
                            // dd($type);
                            $type = ($phone->type == "fax") ? "fax" : "work";
                            // dd($type);

                            $phoneRecord = Phone::create([
                                "branch_id"      => $branch->id,
                                "type"           => $type,
                                "code_country"   => "+7",
                                "code_operator"  => "fix",
                                "number"         => $number,
                                "contact_person" => isset($phone->comment) ? $phone->comment : ""
                            ]);
                            // dd($phoneRecord->toArray());
                        }

                        // dd($orgSites);
                        foreach ($orgSites as $site)
                        {
                            $socialRecord = Social::create([
                                "branch_id"       => $branch->id,
                                "type"            => $site->type,
                                "name"            => $site->text,
                                "contact_person"  => ""
                            ]);
                            // dd($socialRecord->toArray());
                        }

                        DB::commit();
                        $this->info("Inserted " . $inc);
                    }
                    catch (Exception $e)
                    {
                        $this->error("Error: " . $e->getMessage());
                    }
                    
                    $bar->advance();
                }
            }

            // dd("DONE PART 1");
        }

        $bar->finish();
    }

    private function seed()
    {
        // $this->removeOrganizations();

        $limit = $this->argument('limit');

        $cities = [
            "kyizyilorda" => 4,
            "taraz" => 6,
            "almatyi" => 3,
            "karaganda" => 5, 
            "astana" => 2,
            "ust-kamenogorsk" => 7, 
            "semey" => 8,
            "kokshetau" => 9,
            "kostanay" => 10,
            "aktyubinsk" => 11,
            "uralsk" => 12,
            "atyirau" => 13,
            "aktau" => 14,
            "shyimkent" => 1,
        ];

        $allCategories = [];
        $total = 15829;

        DB::table('parsedobjects')->where('id', '>', 6765)->chunk($limit, function($objects) use ($limit, $cities, &$allCategories, &$total)
        {
            $allContacts = [];

            foreach ($objects as $key => $object) 
            {
                try
                {
                    $orgCityId = "";
                    $orgUrl = "";
                    $orgCategory = "";
                    $orgAddress = "";
                    $orgWorkingHours = "";
                    $orgContacts = [];
                    $orgSite = "";
                    $orgEmail = "";
                    $orgDescription = "";
                    $orgName = "";
                    $orgLat = "";
                    $orgLng = "";

                    // dd($object);

                    if ($object->name == "" || $object->name == "БЕЗ НАЗВАНИЯ") continue;

                    $field = json_decode($object->url);
                    $city = $field->city;

                    // city & url (notes)
                    $orgUrl = $field->url;
                    $orgCityId = $cities[$city];
                    // dd([$orgUrl, $orgCityId]);
                    
                    // categories
                    $categories = json_decode($object->categories);
                    // dd($this->decodeUnicode($categories[0]));
                
                    if (!empty($categories))
                    {
                        $orgCategory = $this->decodeUnicode($categories[0]);
                    }

                    // address
                    $address = json_decode($object->address);
                    // if (count($address) > 0) dd($this->decodeUnicode($address[count($address) - 1]));

                    if (!empty($address))
                    {
                        $orgAddress = $this->decodeUnicode($address[count($address) - 1]);
                    }

                    // working hours
                    $orgWorkingHours = $object->workinghours;
                    // dd($orgWorkingHours);
                    
                    // contacts
                    $contacts = json_decode($object->contacts);
                    // if (count($contacts) > 0) dd($contacts);

                    if (!empty($contacts)) 
                    {
                        foreach ($contacts as $contact)
                        {
                            if (strlen($contact) > 3 && strpos($contact, "u") === false)
                            {
                              $orgContacts[] = $contact;
                            }
                        }
                    }

                    // sites
                    $sites = json_decode($object->sites);
                    // if (count($sites) > 0) dd($sites);

                    if (!empty($sites)) $orgSite = $sites[0];

                    // emails
                    $emails = json_decode($object->emails);
                    // if (count($emails) > 0) dd($emails);

                    if (!empty($emails)) $orgEmail = $emails[0];

                    // description & production
                    $orgDescription = $object->description . "/n" . $object->production;
                    // dd($orgDescription);

                    // lat
                    $lat = json_decode($object->lat);
                    // if (count($lat) > 0) dd($lat[0]);

                    if (!empty($lat)) $orgLat = $lat[0];

                    // lng
                    $lng = json_decode($object->lng);
                    // if (count($lng) > 0) dd($lng[0]);

                    if (!empty($lng)) $orgLng = $lng[0];

                    // name
                    $orgName = $object->name;
                    // dd($orgName);

                
                    // dd([
                    //   'cityId' => $orgCityId,
                    //   'category' => $orgCategory,
                    //   'name' => $orgName,
                    //   'description' => $orgDescription,
                    //   'address' => $orgAddress,
                    //   'workinghours' => $orgWorkingHours,
                    //   'contacts' => $orgContacts,
                    //   'site' => $orgSite,
                    //   'email' => $orgEmail,
                    //   'lat' => $orgLat,
                    //   'lng' => $orgLng,
                    //   'url' => $orgUrl
                    // ]);

                    // insert to organizations, branches, phones, socials
                    DB::beginTransaction();

                    $dbCategory = Category::whereName($orgCategory)->first();
                    if (!$dbCategory) 
                    {
                        $rootCategory = Category::findOrFail(1);

                        $dbCategory = Category::create([
                            'name' => $orgCategory, 
                            'icon' => 'noicon.png', 
                            'slug' => $this->sluggify($orgCategory)
                        ]);

                        $dbCategory->makeChildOf($rootCategory);
                        $dbCategory->save();
                    }
                    // dd($dbCategory->toArray());

                    $organization = Organization::create([
                        "name"          => $orgName,
                        "type"          => "custom",
                        "description"   => $orgDescription,
                        "status"        => 'published',
                        "notes"         => $orgUrl
                    ]);
                    // dd($organization->toArray());
                 
                    $branch = Branch::create([
                        "organization_id"   => $organization->id,
                        "type"              => "main",
                        "name"              => $organization->name,
                        "description"       => $organization->description,
                        "city_id"           => $orgCityId,
                        "address"           => $orgAddress,
                        "post_index"        => "",
                        "email"             => $orgEmail,
                        "hits"              => 0,
                        "lat"               => $orgLat,
                        "lng"               => $orgLng,
                        "working_hours"     => $orgWorkingHours,
                        "status"            => "published"
                    ]);
                    // dd($branch->toArray());

                    // map branch to category!
                    $pivotRecord = DB::table("branch_category")->insert([
                        "branch_id"   => $branch->id,
                        "category_id" => $dbCategory->id
                    ]);
                    // dd($pivotRecord);

                    if (!empty($orgContacts))
                    {
                        foreach ($orgContacts as $phone)
                        {
                            $type = $codeCountry = $codeOperator = $number = "";

                            // type
                            $fb = strpos($phone, "(");
                            $lb = strpos($phone, ")");
                            $codeOperator = substr($phone, $fb + 1, $lb - $fb - 1);
                            
                            // number
                            $number = substr($phone, $lb + 1);
                            $number = str_replace("-", "", trim($number));
                            // dd($number);

                            if (!empty($codeOperator) && strlen($codeOperator) == 3 && $codeOperator[1] != "1" && $codeOperator[1] != "2")
                            {
                                $type = "mobile";
                            }
                            else
                            {
                                $type = "work";
                            }
                            // dd($type);

                            $phoneRecord = Phone::create([
                                "branch_id"      => $branch->id,
                                "type"           => $type,
                                "code_country"   => "+7",
                                "code_operator"  => $codeOperator,
                                "number"         => $number,
                                "contact_person" => ""
                            ]);
                            // dd($phoneRecord->toArray());
                        }
                    }

                    if (!empty($orgSite))
                    {
                        $socialRecord = Social::create([
                            "branch_id"       => $branch->id,
                            "type"            => "website",
                            "name"            => $orgSite,
                            "contact_person"  => ""
                        ]);
                    }
                    
                    // dd($socialRecord->toArray());

                    DB::commit();
                    $total -= 1;
                }
                catch (Exception $e)
                {
                    $this->error("Error: " . $e->getMessage());
                }
            }

            $this->info("LEFT: " . $total);
        });

        $this->info("DONE");
    }

    private function removeOrganizations()
    {
        try 
        {
            $lastId = Organization::orderBy('id', 'DESC')->first()->id;

            $ids = [];
            for ($i = 2810; $i <= $lastId; $i++)
            {
                $ids[] = $i;
            }

            $organizations = Organization::whereIn('id', $ids)->get();
            // dd(count($organizations));

            foreach ($organizations as $organization)
            {
                foreach ($organization->branches as $branch)
                {
                    foreach ($branch->phones as $key => $phone) 
                    {
                        $phone->delete();
                    }

                    foreach ($branch->socials as $key => $social) 
                    {
                        $social->delete();
                    }

                    foreach ($branch->photos as $key => $photo) 
                    {
                        File::delete(public_path() . "/images/photos/" . $photo->path);
                        $photo->delete();
                    }

                    $branch->delete();
                }

                $organization->delete();
            }

            $this->info("DONE");
        } 
        catch (Exception $e) 
        {
            flash()->error('Ошибка удаления: ' . $e->getMessage());
            return redirect()->back();
        }
    }


    private function parse()
    {
        $limit = $this->argument('limit');

        DB::table('urls')->where("parsed", 0)->chunk($limit, function($urls) use ($limit)
        {
            $needCity = false;
            $cities = [
                "kyizyilorda",
                "taraz",
                "almatyi",
                "karaganda", 
                "astana",
                "ust-kamenogorsk", 
                "semey",
                "kokshetau",
                "kostanay",
                "aktyubinsk",
                "uralsk",
                "atyirau",
                "aktau",
                "shyimkent",
            ];

            // $proxies = [
            //     '5.196.94.27:3128',
            //     "200.240.248.234:3128",
            //     "5.196.88.157:3128",
            //     "191.102.110.22:3128",
            //     "75.76.162.43:3128",
            //     "188.166.188.166:80",
            //     "103.250.58.52:3128",
            //     "161.139.251.106:9000",
            //     "179.159.63.237:3128",
            //     "37.61.251.177:8080",
            //     "5.39.72.58:3128",
            //     "193.200.83.243:8080",
            //     "52.87.240.241:3128",
            //     "5.39.74.118:3128",
            //     "117.16.46.63:3128",
            //     "200.45.54.139:3128",
            // ];
            $proxies = [];

            $handle = fopen(public_path() . "/data/proxies.txt", "r");
            if ($handle) 
            {
                while (($line = fgets($handle)) !== false) 
                {
                    $proxies[] = trim($line);
                }

                fclose($handle);
            }

            $proxy = $proxies[array_rand($proxies)];
            // dd($proxy);

            $orgs = [];

            $updateUrlIds = [];
            foreach ($urls as $url) 
            {
                $updateUrlIds[] = $url->id;
            }
            DB::table('urls')->whereIn('id', $updateUrlIds)->update(['parsed' => 1]);

            foreach ($urls as $key => $url) 
            {
                // DB::table('urls')->where("id", $url->id)->update(['parsed' => 1]);

                // check for city
                $whichCity = "";
                $needCity = false;

                foreach ($cities as $city)
                {
                    if (strpos($url->url, $city) !== false) 
                    {
                        $whichCity = $city;
                        $needCity = true;
                        break;
                    }
                }

                if ($needCity == false) continue;

                $client = new Client();
                $guzzle = $client->getClient(["proxy" => $proxy]);
                $client->setClient($guzzle);

                // $url = new StdClass;
                // $url->id = 1;
                // $url->url = "http://orgpage.kz/otegen-batyir/almatysystem-2653039.html";
                // $url->url = "http://orgpage.kz/astana/uk-shanyrak-2564149.html";
                
                $crawler = $client->request('GET', $url->url);       
                $status_code = $client->getResponse()->getStatus();
                // dd($status_code);

                $name = "";
                $categories = [];
                $address = [];
                $workingHours = "";
                $contacts = [];
                $sites = [];
                $emails = [];
                $description = "";
                $production = "";
                $lat = "";
                $lng = "";

                if ($status_code == 200)
                {
                    // name
                    $nameNode = $crawler->filter('h1.profile[itemprop=name]');
                    $name = ($nameNode->count() > 0) ? $nameNode->text() : "БЕЗ НАЗВАНИЯ";

                    // categories
                    $categoriesNode = $crawler->filter('#list_rubrics a');
                    if ($categoriesNode->count() > 0)
                    {
                        $categories = $categoriesNode->each(function($node, $i)
                        {
                            return $node->text();
                        });
                    }       
                    // dd($categories);

                    // address
                    $addressNode = $crawler->filter('#list_address span');
                    if ($addressNode->count() > 0)
                    {
                        $address = $addressNode->each(function($node, $i)
                        {
                            return $node->text();
                        });
                    }
                    // dd($address);
                    
                    // working hours
                    $workingHoursNode = $crawler->filter('#workinghours');
                    if ($workingHoursNode->count() > 0) $workingHours = $workingHoursNode->text();
                    // dd($workingHours);

                    // list_contact_phone
                    $contactsNode = $crawler->filter('#list_contact_phone #phones td');
                    if ($contactsNode->count() > 0)
                    {
                        $contacts = $contactsNode->each(function($node, $i)
                        {
                            return trim($node->text());
                        });
                    }
                    // dd($contacts);

                    // list_sites
                    $sitesNode = $crawler->filter('#list_sites span[class!=left]');
                    if ($sitesNode->count() > 0)
                    {
                        $sites = $sitesNode->each(function($node, $i)
                        {
                            return $node->text();
                        });
                    }
                    // dd($sites);

                    // list_email
                    $emailsNode = $crawler->filter('#list_email a');
                    if ($emailsNode->count() > 0)
                    {
                        $emails = $emailsNode->each(function($node, $i)
                        {
                            return $node->text();
                        });
                    }
                    // dd($emails);

                    // list_description
                    $descriptionNode = $crawler->filter('#list_description #description');
                    if ($descriptionNode->count() > 0) $description = $descriptionNode->text();
                    // dd($description);

                    // list_production
                    $productionNode = $crawler->filter('#list_production #production');
                    if ($productionNode->count() > 0) $production = $productionNode->text();
                    // dd($production);

                    // <meta itemprop="latitude" content="43.235317" />
                    $latNode = $crawler->filter('meta[itemprop=latitude]');
                    if ($latNode->count() > 0) $lat = $latNode->extract('content');
                    // dd($lat);

                    // <meta itemprop="longitude" content="76.842958" />
                    $lngNode = $crawler->filter('meta[itemprop=longitude]');
                    if ($lngNode->count() > 0) $lng = $lngNode->extract('content');
                    // dd($lng);
                }
                else
                {
                    $this->error("Error: " . $url->id);
                    continue;
                }

                // $org = [
                //     'url' => $url->url,
                //     'categories' => $categories,
                //     'address' => $address,
                //     'workinghours' => $workingHours,
                //     'contacts' => $contacts,
                //     'sites' => $sites,
                //     'emails' => $emails,
                //     'description' => $description,
                //     'production' => $production,
                //     'lat' => $lat,
                //     'lng' => $lng
                // ];

                $org = [
                    'url' => json_encode(['city' => $whichCity, 'url' => $url->url]),
                    'categories' => json_encode($categories),
                    'address' => json_encode(str_replace("'", '"', $address)),
                    'workinghours' => $workingHours,
                    'contacts' => json_encode($contacts),
                    'sites' => json_encode($sites),
                    'emails' => json_encode($emails),
                    'description' => str_replace("'", '"', $description),
                    'production' => str_replace("'", '"', $production),
                    'lat' => json_encode($lat),
                    'lng' => json_encode($lng),
                    'name' => str_replace("'", '"', $name)
                ];

                $orgs[] = $org;
            }

            if (count($orgs) > 0)
            {
                $query = 'INSERT INTO `parsedobjects` (`url`, `categories`, `address`, `workinghours`, `contacts`, `sites`, `emails`, `description`, `production`, `lat`, `lng`, `created_at`, `updated_at`, `name`) VALUES ';

                $length = count($orgs);
                foreach ($orgs as $key => $org)
                {
                    $query .= "('" . $org['url'] . "','" . $org['categories'] . "','" . $org['address'] . "','" . $org['workinghours'] . "','" . $org['contacts'] . "','" . $org['sites'] . "','" . $org['emails'] . "','" . $org['description'] . "','" . $org['production'] . "','" . $org['lat'] . "','" . $org['lng'] . "', NULL, NULL, '" . $org['name'] . "')";
                
                    if ($key + 1 < $length) $query .= ',';
                }

                // File::put(public_path() . '/data/test.txt', $query);
                // return;

                DB::insert($query);
            }
            else
            {
                $this->info("other cities");
            }
        });    

        $this->info("DONE.");
    }

    private function parseXml()
    {
        $xml = XmlParser::load(public_path() . '/data/sitemap.xml');

        $url = $xml->parse([
            'loc' => ['uses' => 'url.loc'],
            'lastmod' => ['uses' => 'url.lastmod']
        ]);

        // dd($url);

        $urls = $xml->parse([
            'urls' => ['uses' => 'url[loc,lastmod]'],
        ]);

        foreach (array_chunk($urls, 100) as $chunk)
        {
            foreach ($chunk as $data)
            {
                foreach ($data as $item)
                {
                    // dd($item);
                    
                    DB::table('urls')->insert([
                        'url' => $item['loc'],
                        'lastmod' => $item['lastmod']
                    ]);

                    $this->info('.');
                }
            }
        }

        $this->info("DONE.");
    }

    private function getOnlyName()
    {
        $limit = $this->argument('limit');

        DB::table('parsedobjects')->where("name", "")->chunk($limit, function($objects) use ($limit, &$lastId)
        {
            $ids = [];
            $names = [];

            foreach ($objects as $key => $object) 
            {
                $field = json_decode($object->url);
                $city = $field->city;

                $url = $field->url;
                // dd($url);

                $proxies = [];

                $handle = fopen(public_path() . "/data/proxies.txt", "r");
                if ($handle) 
                {
                    while (($line = fgets($handle)) !== false) 
                    {
                        $proxies[] = trim($line);
                    }

                    fclose($handle);
                }

                $proxy = $proxies[array_rand($proxies)];
                // dd($proxy);

                $client = new Client();
                $guzzle = $client->getClient(["proxy" => $proxy]);
                $client->setClient($guzzle);

                // $url = new StdClass;
                // $url->id = 1;
                // $url->url = "http://orgpage.kz/otegen-batyir/almatysystem-2653039.html";
                // $url->url = "http://orgpage.kz/astana/uk-shanyrak-2564149.html";
                
                $crawler = $client->request('GET', $url);       
                $status_code = $client->getResponse()->getStatus();

                if ($status_code == 200)
                {
                    $nameNode = $crawler->filter('h1.profile[itemprop=name]');
                    // dd($nameNode->text());
                    
                    // DB::table('parsedobjects')->where('id', $object->id)->update(['name' => $nameNode->text()]);

                    $ids[] = $object->id;
                    $names[] = ($nameNode->count() > 0) ? $nameNode->text() : "БЕЗ НАЗВАНИЯ";
                }
                else
                {
                    $this->error("URL error: " . $url);
                }
            }

            if (count($ids) > 0 && count($names) > 0)
            {
                $query =    'UPDATE parsedobjects SET name = CASE id';
                $whereQuery = ' WHERE id IN (';

                $length = count($ids);
                foreach ($ids as $key => $id)
                {
                    $query .= " WHEN " . $id . " THEN '" . $names[$key] . "'";
                    $whereQuery .= $id;

                    if ($key + 1 < $length) $whereQuery .= ", ";
                }
                        
                $query .= ' ELSE "" END';
                $whereQuery .= ')';

                // dd($query . $whereQuery);
                DB::update($query . $whereQuery);
            }
        });

        $this->info("DONE");
    }

    private function getOrgIds()
    {
      $count = DB::table('organizations')->where('notes', '!=', '')->count();
      $bar = $this->output->createProgressBar($count);

      DB::table('organizations')
            ->where('notes', '!=', '')
            ->chunk(1000, function($orgs) use (&$bar)
      {
            foreach ($orgs as $org)
            {
                  File::append(public_path() . '/data/org_ids.txt', $org->notes . "\n");
                  $bar->advance();
            }
      });

      $bar->finish();
    }


    private function getBranches()
    {
      // $file = File::get(public_path() . '/data/org_ids.txt');
      // // dd($file);
      $data = file(public_path() . '/data/org_ids.txt');
      // dd($data);

      $count = count($data);
      $bar = $this->output->createProgressBar($count);
      
      foreach(array_chunk($data, 1000) as $chunk)
      {
            foreach ($chunk as $orgId)
            {
                  $orgId = trim($orgId);
                  $proxy = $this->getRandomProxy();

                    $path = public_path() . "/data/gis-branches/";
                    $url = "https://catalog.api.2gis.ru/2.0/catalog/branch/list?page=1&page_size=12&org_id=" . $orgId . "&hash=f6275edd97161405&stat%5Bpr%5D=8&fields=items.region_id%2Citems.adm_div%2Citems.contact_groups%2Citems.flags%2Citems.address%2Citems.rubrics%2Citems.name_ex%2Citems.point%2Citems.external_content%2Citems.schedule%2Citems.org%2Citems.ads.options%2Citems.reg_bc_url%2Crequest_type%2Cwidgets%2Cfilters%2Citems.reviews%2Chash%2Csearch_attributes&key=ruczoy1743";

                    $opts = array(
                        'https' => array(
                            'method'=>"GET",
                            'proxy' => $proxy,
                        ),
                        "ssl" => array(
                            "verify_peer"=>false,
                            "verify_peer_name"=>false,
                        )
                    );
                    $context = stream_context_create($opts);

                    $data = file_get_contents($url, false, $context);

                  $data = json_decode($data);
                  // dd($data);

                  if ($data->meta->code == 404) 
                  {
                      $this->info("no results for " . $rubric['id']);
                      continue;
                  }

                  $total = $data->result->total;
                  $numOfPages = intval(ceil($total / 50.0));

                  if ($numOfPages == 1)
                  {
                      $this->downloadBranches($orgId, 1);
                  }
                  else
                  {
                      for ($i = 1; $i <= $numOfPages; $i++) 
                      {
                          $this->downloadBranches($orgId, $i);
                      }
                  }


                  $bar->advance();
            }
            
      }

      $bar->finish();
    }

    private function downloadBranches($orgId, $pageNum)
    {
      $proxy = $this->getRandomProxy();

        $path = public_path() . "/data/gis-branches/";
        $url = "https://catalog.api.2gis.ru/2.0/catalog/branch/list?page=" . $pageNum . "&page_size=50&org_id=" . $orgId . "&hash=f6275edd97161405&stat%5Bpr%5D=8&fields=items.region_id%2Citems.adm_div%2Citems.contact_groups%2Citems.flags%2Citems.address%2Citems.rubrics%2Citems.name_ex%2Citems.point%2Citems.external_content%2Citems.schedule%2Citems.org%2Citems.ads.options%2Citems.reg_bc_url%2Crequest_type%2Cwidgets%2Cfilters%2Citems.reviews%2Chash%2Csearch_attributes&key=ruczoy1743";

        $opts = array(
            'https' => array(
                'method'=>"GET",
                'proxy' => $proxy,
            ),
            "ssl" => array(
                "verify_peer"=>false,
                "verify_peer_name"=>false,
            )
        );
        $context = stream_context_create($opts);

        $data = file_get_contents($url, false, $context);
        file_put_contents($path . $orgId . "-" . $pageNum . ".json", $data);
    }


    private function decodeUnicode($str)
    {
        return json_decode('"' . str_replace('u', '\u', $str . '"'));
    }

    private function sluggify($string, $gost = false)
  {
    if ($gost)
    {
      $replace = array("А"=>"A","а"=>"a","Б"=>"B","б"=>"b","В"=>"V","в"=>"v","Г"=>"G","г"=>"g","Д"=>"D","д"=>"d",
          "Е"=>"E","е"=>"e","Ё"=>"E","ё"=>"e","Ж"=>"Zh","ж"=>"zh","З"=>"Z","з"=>"z","И"=>"I","и"=>"i",
          "Й"=>"I","й"=>"i","К"=>"K","к"=>"k","Л"=>"L","л"=>"l","М"=>"M","м"=>"m","Н"=>"N","н"=>"n","О"=>"O","о"=>"o",
          "П"=>"P","п"=>"p","Р"=>"R","р"=>"r","С"=>"S","с"=>"s","Т"=>"T","т"=>"t","У"=>"U","у"=>"u","Ф"=>"F","ф"=>"f",
          "Х"=>"Kh","х"=>"kh","Ц"=>"Tc","ц"=>"tc","Ч"=>"Ch","ч"=>"ch","Ш"=>"Sh","ш"=>"sh","Щ"=>"Shch","щ"=>"shch",
          "Ы"=>"Y","ы"=>"y","Э"=>"E","э"=>"e","Ю"=>"Iu","ю"=>"iu","Я"=>"Ia","я"=>"ia","ъ"=>"","ь"=>"");
    }
    else
    {
      $arStrES = array("ае","уе","ое","ые","ие","эе","яе","юе","ёе","ее","ье","ъе","ый","ий");
      $arStrOS = array("аё","уё","оё","ыё","иё","эё","яё","юё","ёё","её","ьё","ъё","ый","ий");        
      $arStrRS = array("а$","у$","о$","ы$","и$","э$","я$","ю$","ё$","е$","ь$","ъ$","@","@");
                  
      $replace = array("А"=>"A","а"=>"a","Б"=>"B","б"=>"b","В"=>"V","в"=>"v","Г"=>"G","г"=>"g","Д"=>"D","д"=>"d",
          "Е"=>"Ye","е"=>"e","Ё"=>"Ye","ё"=>"e","Ж"=>"Zh","ж"=>"zh","З"=>"Z","з"=>"z","И"=>"I","и"=>"i",
          "Й"=>"Y","й"=>"y","К"=>"K","к"=>"k","Л"=>"L","л"=>"l","М"=>"M","м"=>"m","Н"=>"N","н"=>"n",
          "О"=>"O","о"=>"o","П"=>"P","п"=>"p","Р"=>"R","р"=>"r","С"=>"S","с"=>"s","Т"=>"T","т"=>"t",
          "У"=>"U","у"=>"u","Ф"=>"F","ф"=>"f","Х"=>"Kh","х"=>"kh","Ц"=>"Ts","ц"=>"ts","Ч"=>"Ch","ч"=>"ch",
          "Ш"=>"Sh","ш"=>"sh","Щ"=>"Shch","щ"=>"shch","Ъ"=>"","ъ"=>"","Ы"=>"Y","ы"=>"y","Ь"=>"","ь"=>"",
          "Э"=>"E","э"=>"e","Ю"=>"Yu","ю"=>"yu","Я"=>"Ya","я"=>"ya","@"=>"y","$"=>"ye");
              
      $string = str_replace($arStrES, $arStrRS, $string);
      $string = str_replace($arStrOS, $arStrRS, $string);
    }
    
    $translated = iconv("UTF-8","UTF-8//IGNORE", strtr($string,$replace));
    $translated = strtolower($translated);
    $translated = str_replace(" ", "-", $translated);

    return $translated;
  }
}
